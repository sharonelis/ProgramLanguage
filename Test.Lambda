# Lambda expression that adds two numbers
Lambda (a, b) a + b;

# Lambda expression with condition (removing return keyword)
Lambda (x, y) if (x > y) { x - y; } else { y - x; };

# Recursive factorial function (without return keyword)
Defun factorial(n) {
    if (n <= 1) {
        1;  # returns 1 implicitly
    } else {
        n * factorial(n - 1);  # no return keyword, just expression
    }
}

# Boolean logic without explicit return
Lambda (a, b) if (a && b) { TRUE; } else { FALSE; };

# String concatenation lambda (ensure parser supports strings)
Lambda (str1, str2) str1 + str2;

# Lambda that multiplies three numbers
Lambda (x, y, z) x * y * z;

# Function definition and call for arithmetic operation
Defun add_and_multiply(x, y, z) {
    (x + y) * z;  # returns result directly
}
add_and_multiply(1, 2, 3);

# A more complex lambda using nested lambdas and arithmetic
Lambda (x) Lambda (y) x + y;
